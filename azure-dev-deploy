#!/usr/bin/env ruby

require 'json'
require 'securerandom'

# Since this script is for deploying testing machines we always set the same simple admin password.
# It has to fulfill the password policy of Azure, though. Otherwise the deployment will fail.
$ADMIN_PASSWORD = 'Adm1nPa$sw0RD'

# The example params file maintained in the xg-azure repository.
$PARAMS_FILE = 'mainTemplateParameters.json'

# A temporary file containing the template parameters that we recreate
# with each run of this program. We use mainTemplateParameters.json as
# base file.
$GENERATED_PARAMS_FILE = 'azure-dev-deploy-parameters.json'

def usage
  puts "Usage: #{$PROGRAM_NAME} LOCATION IMAGE_PREFIX"
  puts
  puts 'This program creates a development deployment of a Sophos XG in '
  puts 'Azure from an image URL prefix and an ARM template. It has to be'
  puts 'executed from a directory containing the xg-azure templates.'
  puts
  puts 'Arguments:'
  puts
  puts 'LOCATION: The Azure location to deploy to. Must match the location of the image VHD store.'
  puts 'IMAGE_PREFIX:   URL prefix of the image to use in the Azure cloud storage.'
  puts
  puts 'Example: '
  puts "#{$PROGRAM_NAME} westeurope https://sophosnsgimages.blob.core.windows.net/azi/SFAZ01_SO01.Release_Develop_CLOUD.17.01.1.266.payg ha myprefix"
  puts "#{$PROGRAM_NAME} eastus https://sophosnsgimages.blob.core.windows.net/azi/SFAZ01_SO01.Release_Develop_CLOUD.17.01.1.266.payg other myprefix"
  puts "All instances are deployed with admin password '#{$ADMIN_PASSWORD}'"

  exit(1)
end

def check_template_dir_file_exists(filename)
  unless File.exist?(filename)
    STDERR.puts "Couldn't find #{filename} in current directory (#{Dir.pwd})"
    STDERR.puts 'Are you sure you are in a directory containing the xg-azure templates?'
    exit(1)
  end
end

def generate_parameters_file(image_prefix, id, rg_prefix)
  str = File.read($PARAMS_FILE)
  data = JSON.parse(str)

  data['parameters']['adminPassword']['value'] = $ADMIN_PASSWORD
  data['parameters']['storageName']['value'] = "xgazure#{rg_prefix}#{id}"
  data['parameters']['publicIpDNS']['value'] = "sfostest-#{rg_prefix}#{id}"
  data['parameters']['devFwBlobUrlPrefix'] = {}
  data['parameters']['devFwBlobUrlPrefix']['value'] = image_prefix

  File.open($GENERATED_PARAMS_FILE, 'w') do |f|
    f.write(JSON.generate(data))
  end
end

def create_resource_group(location, id, rg_prefix)
  group_name= "#{rg_prefix}-#{id}"
  status = system("az group create --location #{location} --name #{group_name}")

  exit(1) if status == false

  group_name
end

def run(resource_group, template)
  check_template_dir_file_exists(template)
  system("az group deployment create --template-file #{template} --parameters @#{$GENERATED_PARAMS_FILE} --resource-group #{resource_group} --verbose")
end

usage if ARGV.length < 2 || ARGV.length > 4

location = ARGV[0]
image_prefix = ARGV[1]

id = SecureRandom.hex(3)
template = 'mainTemplate.json'
template = 'inboundHa.json' if ARGV.length >= 3 && ARGV[2] == 'ha'

rg_prefix = 'dev'
rg_prefix = ARGV[3] if ARGV.length == 4

generate_parameters_file(image_prefix, id, rg_prefix)
resource_group = create_resource_group(location, id, rg_prefix)
run(resource_group, template)
